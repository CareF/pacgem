#!/usr/bin/ruby

require 'tmpdir'
require 'rubygems'
require 'rubygems/format'
require 'shellwords'
require 'open-uri'
require 'digest/sha2'

module Pacgem
  module Util
    def which?(name)
      `which #{name}`
      $?.success?
    end

    def spew(file, content)
      File.open(file, 'w') {|f| f.write(content) }
    end

    extend self
  end

  class Package
    include Util

    def initialize(name, version, uri, explicit)
      @gemname = name
      @name = "ruby-#{name.downcase}"
      @version, @uri, @explicit = version, uri, explicit
    end

    def install
      Dir.mkdir(@name)
      Dir.chdir(@name) do
        download
        generate_pkgbuild
        build
        check
        system_install
      end
    end

    def installed?
      installed = `pacman -Q #{@name.shellescape} 2>/dev/null`.split(/\s+/)
      installed[1] =~ /^#{@version}\-\d+$/
    end

    private

    def download
      @gemfile = "#{@gemname}-#{@version}.gem"
      IO.copy_stream(open("#{@uri}gems/#{@gemfile}"), File.open(@gemfile, 'w'))
      puts "Downloaded #{@gemfile}"
    end

    def build
      `makepkg`
      @pkgfile = Dir["#{@name}-*.pkg.*"].first
      raise "makepkg #{@name} failed" if !@pkgfile
    end

    def check
      if which?('namcap')
        puts "Checking #{@pkgfile} with namcap..."
        `namcap #{@pkgfile} 1>&2`
      end
    end

    def system_install
      puts "Installing #{@pkgfile} with pacman..."
      `sudo pacman --as#{@explicit ? 'explicit' : 'deps'} -U #{@pkgfile.shellescape}`
    end

    def generate_pkgbuild
      spec = Gem::Format.from_file_by_path(@gemfile).spec

      depends = %w(ruby)
      spec.runtime_dependencies.each do |dep|
        dep.requirement.requirements.each do |comp, ver|
          comp = '>=' if comp == '~>'
          depends << "ruby-#{dep.name}#{comp}#{ver}"
        end
      end

      digest = Digest::SHA2.file(@gemfile).to_s
      license = spec.license || 'Ruby'
      arch = spec.extensions.empty? ? %w(any) : %w(i686 x86_64)

      pkgbuild = %{# Generated by pacgem
_gemname=#{spec.name}
pkgname=ruby-$_gemname
pkgver=#{spec.version}
pkgrel=1
pkgdesc=#{spec.summary.inspect}
arch=(#{arch.map(&:inspect).join(' ')})
url=#{spec.homepage.inspect}
license=(#{license.inspect})
depends=(#{depends.map(&:inspect).join(' ')})
makedepends=('rubygems')
source=(#{@uri}gems/$_gemname-$pkgver.gem)
sha256sums=(#{digest})
noextract=($_gemname-$pkgver.gem)
build() {
  cd $srcdir
  # _gemdir is defined inside build() because if ruby[gems] is not installed on the system
  #  makepkg will barf when sourcing the PKGBUILD
  local _gemdir=`gem environment gemdir`
  gem install --no-ri --no-rdoc --ignore-dependencies -n "$pkgdir/usr/bin" -i "$pkgdir$_gemdir" $_gemname-$pkgver.gem
  [ -d "$pkgdir$_gemdir/bin" ]  && find "$pkgdir$_gemdir/bin" -type f -exec chmod 755 '{}' ';'
  [ -d "$pkgdir$_gemdir/gems" ] && find "$pkgdir$_gemdir/gems" -name '*.o' -exec rm -f '{}' ';'
  rm -f "$pkgdir$_gemdir/cache/$_gemname-$pkgver.gem"
  rmdir "$pkgdir$_gemdir/bin"   || true
  rmdir "$pkgdir$_gemdir/cache" || true
  rmdir "$pkgdir$_gemdir/doc"   || true
}
}
      spew('PKGBUILD', pkgbuild)
    end
  end

  class Installer
    def initialize()
      @order = []
      @packages = {}
    end

    def install
      @order.reject! {|pkg| pkg.installed? }
      @order.each {|pkg| pkg.install }
    end

    def resolve(name, version)
      resolve_dep(Gem::Dependency.new(name, version), true)
    end

    private

    def resolve_dep(dep, explicit)
      @packages[dep.name] ||= begin
        puts "Resolving gem #{dep}..."
        spec, uri = Gem::SpecFetcher.fetcher.fetch(dep, true).last
        raise "Gem #{name} not found" if !spec
        spec.runtime_dependencies.each {|dep| resolve_dep(dep, false) }
        Package.new(dep.name, spec.version, uri, explicit).tap {|pkg| @order << pkg }
      end
    end
  end

  def self.run(args)
    if args.length < 1
      puts "Usage: #{$0} gem-name [gem-version]"
      exit
    end

    raise 'Must not be root' if Process.uid == 0

    Dir.mktmpdir('pacgem-') do |tmp|
      Dir.chdir(tmp) do
        installer = Installer.new
        installer.resolve(args[0], args[1])
        installer.install
      end
    end
  rescue => ex
    puts ex.message
    exit 1
  end
end

Pacgem.run(ARGV) if $0 == __FILE__
